#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('gamePrototype:server');
var socketio = require('socket.io');
var http = require('http');
var User = require('../module/user');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Create socket io listener.
 */
var io = socketio.listen(server);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

/**
 * The game server logic part
 */

var startTime = 0;
var curOwner = 0;
var gameIsRunning = false;
var timerRef;

console.log("Server starts!");

io.on('connection', function(socket) {

  socket.broadcast.emit('newUser', { users: Object.keys(User.userList) });

  socket.on('resetTime', function(response) {

    if (gameIsRunning) {
      console.log('resetTime' + socket.request.connection.remoteAddress);

      curOwner = response.username;

      if (User.makeBid(curOwner) > 0) {
        socket.broadcast.emit('adjustTime', {
          serverTime: Date.now(),
          showTime: 10,
          owner: curOwner
        });
        socket.emit('adjustTime', {
          serverTime: Date.now(),
          showTime: 10,
          owner: curOwner
        });
        clearTimeout(timerRef);
        timerRef = setTimeout(timerCheck, 10000);
      }

        
    }
  });

  var timerCheck = function() {

    if (!gameIsRunning) {
      return;
    }
    if (Date.now() - startTime < 10000) {
      return;
    }
    gameIsRunning = false;

    socket.broadcast.emit('gameOver', {owner: curOwner});
    socket.emit('gameOver', {owner: curOwner});

    // for time sync test only, not junk
    console.log(Date.now() - startTime);

    console.log("Game over! The winner is " + curOwner);
    User.resetBid();
  }

  socket.on('startGame', function(response) {
    
    if (!gameIsRunning) {
      startTime = Math.floor(Date.now());

      curOwner = undefined;

      console.log('startGame' + socket.request.connection.remoteAddress);

      socket.broadcast.emit('adjustTime', {
        serverTime: Date.now(),
        showTime: 10,
        owner: curOwner
      });
      socket.emit('adjustTime', {
        serverTime: Date.now(),
        showTime: 10,
        owner: curOwner
      });
      gameIsRunning = true;
      timerRef = setTimeout(timerCheck, 10000);
    }
  });
  
});
